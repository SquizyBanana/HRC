import numpy as np
import pandas as pd
from pgmpy.models import DynamicBayesianNetwork as DBN
from pgmpy.factors.discrete import TabularCPD
from pgmpy.inference import VariableElimination

dbn = DBN()

dbn.add_nodes_from(["Gaze", "Userintent"])

dbn.add_edges_from(
    [
        (("Userintent", 0),("Gaze", 0)),
        (("Userintent", 0), ("Userintent", 1)),
    ]
)
cpd_user_intent = TabularCPD(
            variable=("Userintent", 0),
            variable_card=4,  # Number of states: forwards, left, right, stop
            values=[[0.7], [0.1], [0.1],[0.1]],  # List of probabilities in the same order as states
            state_names={('Userintent',0): ['Forwards', 'Left', 'Right', 'Stop']}
        )
cpd_gaze_direction = TabularCPD(
            variable=("Gaze",0),
            variable_card=5,  # Gaze can be forwards, left, right, backleft, backright
            values=[
                [0.6, 0.15, 0.15, 0.2],  # Probability Gaze=Forwards
                [0.19, 0.50, 0.04, 0.15],  # Probability Gaze=Left
                [0.19, 0.04, 0.50, 0.15],  # Probability Gaze=Right
                [0.01, 0.3, 0.01, 0.25],  # Probability Gaze=BackLeft
                [0.01, 0.01, 0.3, 0.25],  # Probability Gaze=BackRight
            ],
            evidence=[("Userintent",0)],
            evidence_card=[4],
            state_names={('Gaze', 0): ['GazeForwards', 'GazeLeft', 'GazeRight', 'GazeBackLeft', 'GazeBackRight'], ('Userintent', 0): ['Forwards', 'Left', 'Right', 'Stop']}
        )


cpd_previous_direction = TabularCPD(
            variable=("Userintent",1),
            variable_card=4,  # Forwards, Left, Right, Back
            values=[
                [0.6, 0.4, 0.4, 0.1],  # Probability Prev=Forwards given each UserIntent
                [0.15, 0.4, 0.01, 0.1],  # Probability Prev=Left given each UserIntent
                [0.15, 0.01, 0.4, 0.1],  # Probability Prev=Right given each UserIntent
                [0.1, 0.19, 0.19, 0.7],  # Probability Prev=Stop given each UserIntent
            ],
            evidence=[("Userintent", 0)],
            evidence_card=[4],
            state_names={('Userintent', 1): ['Forwards', 'Left', 'Right', 'Stop'],('Userintent', 0): ['Forwards', 'Left', 'Right', 'Stop']}
        )

dbn.add_cpds(cpd_user_intent, cpd_gaze_direction, cpd_previous_direction)

dbn.check_model()
inference = VariableElimination(dbn)

print(inference.query([("Userintent", 1)],{("Gaze",0): "GazeLeft"}))
print(inference.query([("Userintent", 1)],{("Gaze",0): "GazeLeft", ("Userintent",0):"Left"}))

# data = np.random.randint(low=0, high=2, size=(1000, 10))
# colnames = []

# for t in range(5):
#     colnames.extend([("Gaze", t), ("Userintent", t)])

# df = pd.DataFrame(data, columns=colnames)
# dbn.fit(df)
# print(dbn)